(import std)

(data Instruction (FoldX Nat) (FoldY Nat))

(define main
  (do io/bind
      (<- input (io/map unwrap! (read-file "inputs/day13.txt")))
      (let1 [dots instrs] (map-two list/iter list/iter (parse! manual-parser input)))
      (display (str-append "Part 1: " (show-nat (set/count (fold-paper dots (iter/first! instrs))))))
      (display (str-append "Part 2:\n" (draw-paper (foldl (<oo set/iter fold-paper) dots instrs))))))

(define (fold-paper dots instr)
  (let (([n map-dim] (match instr (case (FoldX x) [x map-car]) (case (FoldY y) [y map-cadr])))
        ((mirror-relevant dot) (map-dim (fun (m) (if (> m n) (- (* (to-nat 2) n) m) m)) dot)))
    (set/collect cmp-pt (map mirror-relevant dots))))

(define (draw-paper dots)
  (let ((set (set/collect cmp-pt dots))
        ([w h] (map-both (apps <o inc maximum list/iter) (unzip dots)))
        (w (inc w)))
    ((<o Str cadr)
     (array/build (fun (Unit i)
                    [Unit (let ((x (rem i w)) (y (/ i w)))
                            (if (= x (dec w)) ascii-newline
                              (string/nth-byte! (to-nat 0) (if (set/member? cmp-pt [x y] set) "#" "."))))])
                  Unit
                  (* w h)))))

(define manual-parser
  (do parse/bind
      (<- dots ((<oo parse/many (parse/lift2 cons'))
                (parse/thenl parse/nat (parse/string ","))
                (parse/thenl parse/nat (parse/string "\n"))))
      parse/space
      (<- instrs (parse/many
                  (do parse/bind
                      (parse/string "fold along ")
                      (<- dim (parse/take-bytes (to-nat 1)))
                      (parse/string "=")
                      (<- n parse/nat)
                      parse/space
                      (parse/pure (match dim (case "x" (FoldX n)) (case _ (FoldY n)))))))
      (parse/pure [dots instrs])))

(define (cmp-pt [i1 j1] [i2 j2]) (match (num/cmp i1 i2) (case Eq (num/cmp j1 j2)) (case x x)))
