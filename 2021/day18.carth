(import std)

(data SfNum
  (SfRegular Int)
  (SfPair (Box [SfNum SfNum])))

(def main
     (do io/bind
         (<- input (io/map unwrap! (read-file "inputs/day18.txt")))

         (let1 nums (map parse-sf-num (lines input)))
         (let1 [n ns] (next! nums))
         (let1 final (foldl (<oo reduce sf-add) (reduce n) ns))

         (display "Part 1:")
         (display (show-sf-num final))
         (display (show-int (magnitude final)))
         (display "")

         (display (str-append "Part 2: "
                              (show-int (maximum (map \(magnitude (reduce (apply2 sf-add #)))
                                                      (iter/cartesian nums nums))))))))

(defun magnitude
  (case [(SfRegular x)] x)
  (case [(SfPair (Box [l r]))] (+ (* 3 (magnitude l)) (* 2 (magnitude r)))))

(def sf-add mk-pair)

(defun reduce [sf]
  (match (explode sf)
    (case (Some sf') (reduce sf'))
    (case None (match (split sf)
                 (case (Some sf') (reduce sf'))
                 (case None sf)))))

(defun split
  (case [(SfRegular x)] (if (>= x 10)
                            (Some (mk-pair (SfRegular (/ x 2)) (SfRegular (/ (inc x) 2))))
                          None))
  (case [(SfPair (Box [l r]))]
        (maybe/map
         (<o SfPair box)
         (maybe/or (maybe/map \(cons' # r) (split l))
                   (nonstrict
                    (maybe/map \(cons' l #) (split r)))))))

(defun explode [sf]
  (defun go
    (case [nesting (SfRegular x)] None)
    (case [nesting (SfPair (Box [l r]))]
          (if (= nesting 4)
              (Some [(SfRegular 0) (Some (regular! l)) (Some (regular! r))])
            (maybe/or
             (maybe/map (fun [[l' ladd radd]]
                          [(mk-pair l'
                                    (maybe' r (fun [radd'] (sf-map-leftmost \(+ radd' #) r)) radd))
                           ladd
                           None])
                        (go (inc nesting) l))
             (nonstrict
              (maybe/map (fun [[r' ladd radd]]
                           [(mk-pair (maybe' l (fun [ladd'] (sf-map-rightmost \(+ ladd' #) l)) ladd)
                                     r')
                            None
                            radd])
                         (go (inc nesting) r)))))))
  (maybe/map car (go 0 sf)))

(defun sf-map-leftmost
  (case [f (SfRegular x)] (SfRegular (f x)))
  (case [f (SfPair (Box [l r]))] (mk-pair (sf-map-leftmost f l) r)))
(defun sf-map-rightmost
  (case [f (SfRegular x)] (SfRegular (f x)))
  (case [f (SfPair (Box [l r]))] (mk-pair l (sf-map-rightmost f r))))

(defun mk-pair [l r] (SfPair (box [l r])))

(defun regular!
  (case [(SfRegular x)] x)
  (case [x] (panic (str-append "regular!: not a regular number: " (show-sf-num x)))))

(defun show-sf-num
  (case [(SfRegular x)] (show-int x))
  (case [(SfPair (Box [l r]))]
        (apps str-append "[" (show-sf-num l) "," (show-sf-num r) "]")))

(def parse-sf-num
     (defun p-sf-num [inp]
       (let1 (Parser p)
           (parse/or (parse/map SfRegular parse/int)
                     (parse/between (parse/string "[")
                                    (parse/string "]")
                                    (do parse/bind
                                        (<- a (Parser p-sf-num))
                                        (parse/string ",")
                                        (<- b (Parser p-sf-num))
                                        (parse/pure (SfPair (box [a b]))))))
         (p inp)))
     \(parse! (Parser p-sf-num) #))
