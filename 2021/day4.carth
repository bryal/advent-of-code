(import std)

(def main
     (do io/bind
         (<- input (io/map unwrap! (read-file "inputs/day4.txt")))
         (let (([draws boards] (map-two parse-draws parse-boards
                                        (unwrap! (string/split-first-line input))))
               (scores (play draws (array/iter boards)))))
         (display (str-append "Part 1: first to win = " (show-int (array/first! scores))))
         (display (str-append "Part 2: last to win = " (show-int (array/last! scores))))))

(defun parse-draws [s] (map (<o unwrap! parse-int) (string/splits-on "," s)))

(defun parse-boards [s] :of (Fun [Str] (Array (Array (Maybe Int))))
  (array/collect
   (map \(array/collect (map parse-int (flat-map words (skip (to-nat 1) (array/iter #)))))
        (iter/chunks (to-nat 6) (lines s)))))

(defun play [draws boards]
  (car (foldl (fun [[scores1 boards] draw] (let1 [scores2 boards'] (mark-boards draw boards)
                                             [(array/append scores1 scores2) (list/iter boards')]))
              [array/nil boards]
              draws)))

(defun mark-boards [x bs]
  (map-car \(merge-sort num/cmp (array/collect-list #))
           (partition-eithers (map \(mark-board x #) bs))))

(defun mark-board [x b]
  (defun score [x b] (* x (sum (cat-maybes (array/iter b)))))
  (match (array/find-by (fun [y] (maybe/= = (Some x) y)) b)
    (case (Some i) (let1 b' (array/set! i None b)
                     (if (bingo? (to-int i) b') (Left (score x b')) (Right b'))))
    (case None (Right b))))

(defun bingo? [i b]
  (defun winning-line? [is] (all none? (map (fun [i] (array/lookup! (to-nat i) b)) is)))
  (let ((row-is (take 5 (range-from (* (/ i 5) 5))))
        (col-is (map (fun [j] (+ (rem i 5) (* 5 j))) (range 0 4))))
    (or (winning-line? row-is) (winning-line? col-is))))
