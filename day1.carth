(import std)

(define main
  (do io/bind
      (<- inp (io/map unwrap! (read-file "inputs/day1.txt")))
      (let1 depths (map (<o unwrap! parse-nat) (lines inp)))
      (display "Part 1:")
      (display (show-nat (count-increases depths)))
      (display "Part 2:")
      (display (show-nat (count-increases (map (<o sum array/iter)
                                               (windows (cast 3) depths)))))))

(define (count-increases ns)
  (count (filter (fun ([a b]) (> b a))
                 (zip ns (skip (cast 1) ns)))))

;; Sliding windows over an iterator, each of width `n`
;; (define: (windows n)
;;     (forall (a) (Fun Nat (Iter a) (Iter (Array a))))
;;   (unfoldr (fun (xs)
;;              (let1 window (array/collect (take (cast n) xs))
;;                (if (< (array/length window) n)  ; At the end
;;                    None
;;                  (Some [window (skip (cast 1) xs)]))))))
